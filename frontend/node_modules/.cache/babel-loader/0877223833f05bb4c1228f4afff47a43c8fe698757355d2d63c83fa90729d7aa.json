{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1,\n  class: \"error\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Questions\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.questions, question => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: question.id\n    }, _toDisplayString(question.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Loading...\")) : _createCommentVNode(\"v-if\", true), $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($data.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","questions","question","id","text","loading","_hoisted_1","_createCommentVNode","error","_hoisted_2","_toDisplayString"],"sources":["/app/src/components/QuestionsList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Questions</h1>\n    <ul>\n      <li v-for=\"question in questions\" :key=\"question.id\">\n        {{ question.text }}\n      </li>\n    </ul>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n  </div>\n</template>\n\n<script>\nimport api from '../api'; // Importa a instância do Axios configurada\n\nexport default {\n  name: 'QuestionsList',\n  data() {\n    return {\n      questions: [], // Armazena as perguntas\n      loading: false, // Indica se os dados estão carregando\n      error: null, // Armazena mensagens de erro, se houver\n    };\n  },\n  mounted() {\n    this.fetchQuestions(); // Busca as perguntas ao montar o componente\n  },\n  methods: {\n    async fetchQuestions() {\n      this.loading = true; // Ativa o indicador de carregamento\n      this.error = null; // Limpa erros anteriores\n      try {\n        const response = await api.get('questions/'); // Faz a requisição\n        this.questions = response.data; // Armazena as perguntas no estado\n      } catch (err) {\n        this.error = 'Failed to load questions'; // Define a mensagem de erro\n        console.error(err); // Loga o erro no console\n      } finally {\n        this.loading = false; // Desativa o indicador de carregamento\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Estilo básico para o componente */\n.error {\n  color: red;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EASsBC,KAAK,EAAC;;;uBAR1BC,mBAAA,CASM,c,0BARJC,mBAAA,CAAkB,YAAd,WAAS,sBACbA,mBAAA,CAIK,c,kBAHHD,mBAAA,CAEKE,SAAA,QANXC,WAAA,CAI6BC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAnBN,mBAAA,CAEK;MAF8BF,GAAG,EAAEQ,QAAQ,CAACC;wBAC5CD,QAAQ,CAACE,IAAI;oCAGTJ,KAAA,CAAAK,OAAO,I,cAAlBT,mBAAA,CAAoC,OARxCU,UAAA,EAQwB,YAAU,KARlCC,mBAAA,gBASeP,KAAA,CAAAQ,KAAK,I,cAAhBZ,mBAAA,CAAiD,OAAjDa,UAAiD,EAAAC,gBAAA,CAAdV,KAAA,CAAAQ,KAAK,oBAT5CD,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}